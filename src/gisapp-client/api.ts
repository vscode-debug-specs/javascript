/* tslint:disable */
/* eslint-disable */
/**
 * GIS Calc
 * Sample GIS Calc
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';
import { URL } from 'url';

/**
 *
 * @export
 * @interface Point
 */
export interface Point {
    /**
     * latitude
     * @type {number}
     * @memberof Point
     */
    latitude: number;
    /**
     * longitude
     * @type {number}
     * @memberof Point
     */
    longitude: number;
}
/**
 *
 * @export
 * @interface RouteLength
 */
export interface RouteLength {
    /**
     *
     * @type {number}
     * @memberof RouteLength
     */
    length: number;
}
/**
 *
 * @export
 * @interface RouteRequest
 */
export interface RouteRequest {
    /**
     *
     * @type {Array<Point>}
     * @memberof RouteRequest
     */
    points: Array<Point>;
}

/**
 * GiscalcApi - axios parameter creator
 * @export
 */
export const GiscalcApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * route length
         * @param {RouteRequest} routeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routeLength: async (routeRequest: RouteRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'routeRequest' is not null or undefined
            assertParamExists('routeLength', 'routeRequest', routeRequest)
            const localVarPath = `/route_length`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(routeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GiscalcApi - functional programming interface
 * @export
 */
export const GiscalcApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = GiscalcApiAxiosParamCreator(configuration)
    return {
        /**
         * route length
         * @param {RouteRequest} routeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async routeLength(routeRequest: RouteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RouteLength>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.routeLength(routeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GiscalcApi - factory interface
 * @export
 */
export const GiscalcApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GiscalcApiFp(configuration)
    return {
        /**
         * route length
         * @param {RouteRequest} routeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routeLength(routeRequest: RouteRequest, options?: any): AxiosPromise<RouteLength> {
            return localVarFp.routeLength(routeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GiscalcApi - object-oriented interface
 * @export
 * @class GiscalcApi
 * @extends {BaseAPI}
 */
export class GiscalcApi extends BaseAPI {
    /**
     * route length
     * @param {RouteRequest} routeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiscalcApi
     */
    public routeLength(routeRequest: RouteRequest, options?: any) {
        return GiscalcApiFp(this.configuration).routeLength(routeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
